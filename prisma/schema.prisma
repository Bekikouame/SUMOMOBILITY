//docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================================
// ENUMS - Définition des valeurs possibles
// =====================================================

enum UserRole {
  CLIENT    // Client qui demande des courses
  DRIVER    // Chauffeur qui fournit des courses
  ADMIN     // Administrateur système
}

enum DriverStatus {
  PENDING     // En attente de validation
  APPROVED    // Approuvé et actif
  SUSPENDED   // Suspendu temporairement
  REJECTED    // Rejeté définitivement
}

enum DocumentStatus {
  PENDING   // En attente de vérification
  APPROVED  // Document validé
  REJECTED  // Document rejeté
  EXPIRED   // Document expiré
}

enum ReservationStatus {
  PENDING    // En attente de confirmation
  CONFIRMED  // Confirmée
  CANCELED   // Annulée
  FULFILLED  // Accomplie avec succès
}

enum RideStatus {
  REQUESTED    // Demandée par le client
  ACCEPTED     // Acceptée par un chauffeur
  IN_PROGRESS  // En cours de réalisation
  COMPLETED    // Terminée avec succès
  CANCELED     // Annulée
}

enum PaymentMethod {
  CASH          // Espèces
  CREDIT_CARD   // Carte bancaire
  MOBILE_MONEY  // Mobile money
  WALLET        // Portefeuille numérique
}

enum PaymentStatus {
  PENDING    // En attente de traitement
  SUCCEEDED  // Paiement réussi
  FAILED     // Paiement échoué
  REFUNDED   // Remboursé
}

enum VehicleStatus {
  AVAILABLE     // Disponible
  IN_USE        // En cours d'utilisation
  MAINTENANCE   // En maintenance
  INACTIVE      // Inactive
}

// Types de notifications
enum NotificationType {
  RIDE_REQUEST        // Nouvelle demande de course
  RIDE_ACCEPTED       // Course acceptée
  RIDE_STARTED        // Course commencée
  RIDE_COMPLETED      // Course terminée
  RIDE_CANCELED       // Course annulée
  RESERVATION_REMINDER // Rappel réservation
  DOCUMENT_EXPIRED     // Document expiré
  DOCUMENT_APPROVED    // Document approuvé
  DOCUMENT_REJECTED    // Document rejeté
  PAYMENT_SUCCESS      // Paiement réussi
  PAYMENT_FAILED       // Paiement échoué
  DRIVER_APPROVED      // Chauffeur approuvé
  SYSTEM_MAINTENANCE   // Maintenance système
}

// Canaux de notification
enum NotificationChannel {
  PUSH      // Notification push
  EMAIL     // Email
  SMS       // SMS
  IN_APP    // Notification in-app
}

// Statut de notification
enum NotificationStatus {
  PENDING   // En attente d'envoi
  SENT      // Envoyée avec succès
  FAILED    // Échec d'envoi
  READ      // Lue par l'utilisateur
}

// =====================================================
// MODÈLES PRINCIPAUX
// =====================================================

// Utilisateur principal (client ou chauffeur)
model User {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String
  phone        String   @unique
  email        String   @unique
  passwordHash String
  role         UserRole @default(CLIENT)
  isActive     Boolean  @default(true)


  adminLogs AdminLog[]
  reports   Report[]
  passwordResetCodes PasswordResetCode[]
  // Géolocalisation pour partitioning
  country      String?
  city         String?
  region       String?
  
  // Métriques d'activité
  lastLoginAt  DateTime?
  
  // Relations polymorphes
  clientProfile ClientProfile?
  driverProfile DriverProfile?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  

  // notifications
  notifications Notification[]
  preferences   NotificationPreference[]
  // Index pour performance
  @@index([role])
  @@index([isActive])
  @@index([country, city])  // Partitioning géographique
  @@index([createdAt])
  
  @@map("users")
}

// Profil spécialisé pour les clients
model ClientProfile {
  id        String @id @default(cuid())
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Préférences client
  preferredPaymentMethod PaymentMethod?
  defaultPickupAddress   String?
  loyaltyPoints         Int           @default(0)
  vipStatus             Boolean       @default(false)
  
  // Relations
  reservations Reservation[]
  rides        Ride[]        @relation("ClientRides")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([loyaltyPoints])
  @@index([vipStatus])
  
  @@map("client_profiles")
}

// Profil spécialisé pour les chauffeurs
model DriverProfile {
  id           String       @id @default(cuid())
  userId       String       @unique
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  status       DriverStatus @default(PENDING)
  licenseNumber String?      @unique
  driverLocation DriverLocation?
  
  // Informations métier
  driverType    String?      // VTC, Taxi, etc.
  workingHours  String?      // Horaires de travail
  maxRadius     Int?         // Rayon d'action en km
  
  // Métriques performance
  rating        Float?       // Note moyenne
  totalRides    Int          @default(0)
  totalEarnings Decimal      @default(0) @db.Decimal(12,2)
  
  // Relations
  documents DriverDocument[]
  vehicles  Vehicle[]
  rides     Ride[]          @relation("DriverRides")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([status])
  @@index([rating])
  @@index([totalRides])
  
  @@map("driver_profiles")
}

// Documents des chauffeurs (permis, assurance, etc.)
model DriverDocument {
  id        String         @id @default(cuid())
  driverId  String
  driver    DriverProfile  @relation(fields: [driverId], references: [id], onDelete: Cascade)
  
  docType    String         // DRIVING_LICENSE, INSURANCE, IDENTITY, etc.
  docNumber  String?
  fileUrl    String?
  status     DocumentStatus @default(PENDING)
  expiresAt  DateTime?      // Date d'expiration
  
  // Audit trail
  reviewedBy String?        // ID de l'admin qui a validé
  reviewedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([driverId, status])
  @@index([docType, status])
  @@index([expiresAt])        // Pour détecter les documents expirés
  
  @@map("driver_documents")
}

// Véhicules des chauffeurs
model Vehicle {
  id              String        @id @default(cuid())
  driverId        String
  driver          DriverProfile @relation(fields: [driverId], references: [id], onDelete: Cascade)
  
  // Informations véhicule
  plateNumber     String        @unique
  brand           String        // Marque
  model           String        // Modèle
  color           String
  year            Int?
  capacity        Int           @default(4)  // Nombre de places
  
  // État et vérification
  status          VehicleStatus @default(AVAILABLE)
  verified        Boolean       @default(false)
  verifiedAt      DateTime?
  
  // Relations
  rides Ride[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([driverId])
  @@index([status])
  @@index([verified])
  @@index([plateNumber])
  
  @@map("vehicles")
}

// Causes d'annulation prédéfinies
model CancellationCause {
  id          String  @id @default(cuid())
  label       String  @unique
  description String?
  active      Boolean @default(true)
  
  // Pour analytics
  category    String?  // CLIENT, DRIVER, SYSTEM, etc.
  
  // Relations
  rides        Ride[]
  reservations Reservation[]
  
  @@index([active])
  @@index([category])
  
  @@map("cancellation_causes")
}

// Réservations (courses programmées à l'avance)
model Reservation {
  id          String            @id @default(cuid())
  clientId    String
  client      ClientProfile     @relation(fields: [clientId], references: [id], onDelete: Restrict)
  
  // Informations réservation
  scheduledAt DateTime          // Heure programmée
  status      ReservationStatus @default(PENDING)
  
  // Détails du trajet
  pickupAddress    String?
  destinationAddress String?
  estimatedDistance Float?       // Distance estimée en km
  estimatedPrice   Decimal?      @db.Decimal(10,2)
  passengerCount   Int          @default(1)
  notes            String?
  
  // Relation avec course réelle (optionnelle)
  rideId String? @unique
  ride   Ride?   @relation(fields: [rideId], references: [id])
  
  // Annulation
  cancellationCauseId String?
  cancellationCause   CancellationCause? @relation(fields: [cancellationCauseId], references: [id])
  canceledAt          DateTime?
  
  // Relations
  payments ReservationPayment[]
  
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
  
  @@index([clientId])
  @@index([status])
  @@index([scheduledAt])
  @@index([canceledAt])
  
  @@map("reservations")
}

// Courses (trajets réels)
model Ride {
  id       String @id @default(cuid())
  clientId String
  client   ClientProfile @relation("ClientRides", fields: [clientId], references: [id], onDelete: Restrict)
  
  // Chauffeur et véhicule (assignés lors de l'acceptation)
  driverId  String?
  driver    DriverProfile? @relation("DriverRides", fields: [driverId], references: [id])
  vehicleId String?
  vehicle   Vehicle?       @relation(fields: [vehicleId], references: [id])
  
  // Informations du trajet
  rideType            String?    // STANDARD, PREMIUM, SHARED, etc.
  pickupAddress       String?
  destinationAddress  String?
  pickupLatitude      Float?
  pickupLongitude     Float?
  destinationLatitude Float?
  destinationLongitude Float?
  
  // Métriques de performance
  requestedAt    DateTime?  // Quand la course a été demandée
  acceptedAt     DateTime?  // Quand le chauffeur a accepté
  startedAt      DateTime?  // Début réel du trajet
  completedAt    DateTime?  // Fin du trajet
  
  // Détails financiers
  distanceKm     Float?     // Distance réelle parcourue
  durationMinutes Int?      // Durée en minutes
  baseFare       Decimal?   @db.Decimal(10,2)
  totalFare      Decimal?   @db.Decimal(10,2)
  driverEarnings Decimal?   @db.Decimal(10,2)
  platformFee    Decimal?   @db.Decimal(10,2)
  
  // Autres détails
  passengerCount Int       @default(1)
  notes          String?
  status         RideStatus @default(REQUESTED)
  
  // Relations optionnelles
  reservation Reservation? // Si c'est une course issue d'une réservation
  
  // Annulation
  cancellationCauseId String?
  cancellationCause   CancellationCause? @relation(fields: [cancellationCauseId], references: [id])
  canceledAt          DateTime?
  canceledBy          String?            // CLIENT ou DRIVER
  
  // Relations
  ratings  Rating[]
  payments RidePayment[]
  trackingPoints RideTrackingPoint[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Index critiques pour performance
  @@index([clientId])
  @@index([driverId])
  @@index([vehicleId])
  @@index([status])
  @@index([requestedAt])
  @@index([completedAt])
  @@index([pickupLatitude, pickupLongitude])  // Recherche géographique
  
  @@map("rides")
}


// Points de suivi GPS pour une course (historique de localisation)
model RideTrackingPoint {
  id        String   @id @default(cuid())
  rideId    String
  ride      Ride     @relation(fields: [rideId], references: [id], onDelete: Cascade)
  
  // Position GPS
  latitude  Float
  longitude Float
  
  // Métadonnées de mouvement
  speed     Float?   // Vitesse en km/h
  heading   Float?   // Direction en degrés (0-360)
  accuracy  Float?   // Précision GPS en mètres
  
  // Données contextuelles
  timestamp DateTime @default(now())
  altitude  Float?   // Altitude (optionnel)
  
  // Index pour performance
  @@index([rideId, timestamp])
  @@index([timestamp]) // Pour le nettoyage des données anciennes
  
  @@map("ride_tracking_points")
}


// Évaluations des courses
model Rating {
  id          String @id @default(cuid())
  rideId      String
  ride        Ride   @relation(fields: [rideId], references: [id], onDelete: Cascade)
  
  // Évaluation
  score       Int    // Note sur 5
  comment     String?
  
  // Critères détaillés (optionnel)
  punctuality Int?   // Ponctualité
  cleanliness Int?   // Propreté
  driving     Int?   // Conduite
  courtesy    Int?   // Courtoisie
  
  createdAt DateTime @default(now())
  
  @@index([rideId])
  @@index([score])
  
  @@map("ratings")
}

// Paiements
model Payment {
  id              String        @id @default(cuid())
  amount          Decimal       @db.Decimal(12,2)
  currency        String        @default("XOF")  // Franc CFA
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  
  // Informations de transaction
  transactionId   String?       @unique  // ID externe )
  processorFee    Decimal?      @db.Decimal(10,2)
  netAmount       Decimal?      @db.Decimal(12,2)
  
  // Audit
  processedAt     DateTime?
  failureReason   String?
  
  // Relations
  ridePayments        RidePayment[]
  reservationPayments ReservationPayment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([status])
  @@index([method])
  @@index([createdAt])
  @@index([transactionId])
  
  @@map("payments")
}

// Table de liaison : Course - Paiement (N:N)
model RidePayment {
  rideId    String
  paymentId String
  ride      Ride    @relation(fields: [rideId], references: [id], onDelete: Cascade)
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  // Métadonnées spécifiques
  paymentType String @default("FARE")  // FARE, TIP, CANCELLATION_FEE
  
  createdAt DateTime @default(now())
  
  @@id([rideId, paymentId])
  @@index([paymentId])
  
  @@map("ride_payments")
}

// Table de liaison : Réservation - Paiement (N:N)
model ReservationPayment {
  reservationId String
  paymentId     String
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  payment       Payment     @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  // Métadonnées spécifiques
  paymentType String @default("DEPOSIT")  // DEPOSIT, CANCELLATION_FEE
  
  createdAt DateTime @default(now())
  
  @@id([reservationId, paymentId])
  @@index([paymentId])
  
  @@map("reservation_payments")
}



// notification


// Templates de notification
model NotificationTemplate {
  id          String             @id @default(cuid())
  type        NotificationType   // Type de notification
  channel     NotificationChannel // Canal (push, email, sms)
  
  // Contenu du template
  title       String            // Titre (pour push/in-app)
  body        String            // Corps du message
  subject     String?           // Sujet (pour email)
  
  // Template avec variables dynamiques
  // Ex: "Votre course vers {{destination}} a été acceptée par {{driverName}}"
  variables   Json?             // Variables disponibles
  
  // Langues supportées
  language    String @default("fr") // fr, en, etc.
  
  // Configuration
  active      Boolean @default(true)
  priority    Int     @default(1)   // 1=haute, 2=moyenne, 3=basse
  
  // Relations
  notifications Notification[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([type, channel, language]) // Un template par type/canal/langue
  @@index([type])
  @@index([active])
  
  @@map("notification_templates")
}

// Notifications envoyées
model Notification {
  id         String              @id @default(cuid())
  templateId String
  template   NotificationTemplate @relation(fields: [templateId], references: [id])
  
  // Destinataire
  userId     String
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Contenu final (après remplacement des variables)
  title      String
  body       String
  subject    String?
  
  // Métadonnées
  type       NotificationType
  channel    NotificationChannel
  status     NotificationStatus   @default(PENDING)
  priority   Int                 @default(1)
  
  // Données contextuelles (ride_id, document_id, etc.)
  metadata   Json?               
  
  // Tracking
  sentAt     DateTime?           // Quand envoyée
  readAt     DateTime?           // Quand lue (in-app)
  errorMsg   String?             // Message d'erreur si échec
  
  // Pour les retry
  attempts   Int      @default(0)
  maxAttempts Int     @default(3)
  nextRetry  DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, status])
  @@index([type])
  @@index([status, nextRetry]) // Pour les retry
  @@index([createdAt])
  
  @@map("notifications")
}

// Configuration utilisateur pour notifications
model NotificationPreference {
  id      String @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Préférences par type
  type    NotificationType
  
  // Canaux activés pour ce type
  pushEnabled   Boolean @default(true)
  emailEnabled  Boolean @default(true)
  smsEnabled    Boolean @default(false)
  inAppEnabled  Boolean @default(true)
  
  // Horaires (format JSON)
  // Ex: {"start": "08:00", "end": "22:00", "timezone": "Africa/Abidjan"}
  schedule      Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, type])
  @@index([userId])
  
  @@map("notification_preferences")
}



// Ajouter ces modèles après vos modèles existants

model ServiceZone {
  id          String   @id @default(cuid())
  name        String
  description String?
  country     String
  city        String
  geometry    Json
  baseFare       Decimal @db.Decimal(8,2)
  perKmRate      Decimal @db.Decimal(6,2) 
  perMinuteRate  Decimal @db.Decimal(6,2)
  isActive       Boolean @default(true)
  maxRadius      Int     @default(50)
  operatingHours Json?
  
  driverLocations DriverLocation[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([isActive])
  @@index([country, city])
  @@map("service_zones")
}

model PointOfInterest {
  id          String @id @default(cuid())
  name        String
  category    String
  address     String?
  description String?
  country     String
  city        String
  latitude    Float
  longitude   Float
  phone       String?
  website     String?
  rating      Float?
  isPopular   Boolean @default(false)
  isActive    Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([category, isActive])
  @@index([latitude, longitude])
  @@index([isPopular])
  @@index([country, city])
  @@map("points_of_interest")
}

model DriverLocation {
  id          String        @id @default(cuid())
  driverId    String        @unique
  driver      DriverProfile @relation(fields: [driverId], references: [id], onDelete: Cascade)
  
  latitude    Float
  longitude   Float
  heading     Float?
  speed       Float?
  accuracy    Float?
  isOnline    Boolean       @default(false)
  isAvailable Boolean       @default(false)
  
  serviceZoneId String?
  currentZone   ServiceZone? @relation(fields: [serviceZoneId], references: [id])
  
  lastPing    DateTime      @default(now())
  batteryLevel Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([latitude, longitude, isOnline, isAvailable])
  @@index([lastPing])
  @@index([serviceZoneId])
  @@map("driver_locations")
}

// pour administration 
model SystemConfig {
  id          String @id @default(cuid())
  key         String @unique
  value       Json
  description String?
  category    String
  isPublic    Boolean @default(false)
  updatedBy   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([category])
  @@index([isPublic])
  @@map("system_configs")
}

model AdminLog {
  id        String @id @default(cuid())
  adminId   String
  admin     User   @relation(fields: [adminId], references: [id])
  
  action    String
  resource  String
  resourceId String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())
  
  @@index([adminId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("admin_logs")
}

model Report {
  id          String @id @default(cuid())
  title       String
  type        String
  filters     Json?
  dateFrom    DateTime?
  dateTo      DateTime?
  data        Json
  fileUrl     String?
  generatedBy String
  generator   User   @relation(fields: [generatedBy], references: [id])
  
  createdAt DateTime @default(now())
  
  @@index([type])
  @@index([generatedBy])
  @@index([createdAt])
  @@map("reports")
}


// reunitalisation de mdp

model PasswordResetCode {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  code      String
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  attempts  Int      @default(0)
  
  createdAt DateTime @default(now())
  
  @@index([code])
  @@index([email])
  @@map("password_reset_codes")
}